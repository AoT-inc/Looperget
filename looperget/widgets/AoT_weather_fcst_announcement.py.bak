# coding=utf-8
#
#  widget_measurement.py - Measurement dashboard widget
#
#  Copyright (C) 2015-2020 Kyle T. Gabriel <looperget@aot-inc.com>
#
#  This file is part of Looperget
#
#  Looperget is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Looperget is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Looperget. If not, see <http://www.gnu.org/licenses/>.
#
#  Contact at aot-inc.com
#
import logging

from looperget.utils.constraints_pass import constraints_pass_positive_value

logger = logging.getLogger(__name__)


WIDGET_INFORMATION = {
    'widget_name_unique': 'AoT_fcst_announcement',
    'widget_name': 'AoT 단기예보문',
    'widget_library': '',
    'no_class': True,
    'message': '사용자가 선택한 시간의 기상청 발표 단기예보를 출력합니다.',
    'widget_width': 4,
    'widget_height': 5,
    'custom_options': [
        {
            'id': 'measurement_max_age',
            'type': 'integer',
            'default_value': 3600,
            'required': True,
            'constraints_pass': constraints_pass_positive_value,
            'name': '최대 유효 시간',
            'phrase': '최대 유효 발표 시간을 설정하세요. (초)'
        },
        {
            'id': 'refresh_seconds',
            'type': 'float',
            'default_value': 1800,
            'constraints_pass': constraints_pass_positive_value,
            'name': '새로고침',
            'phrase': '단기예보를 새로고침할 시간을 설정하세요. (초)'
        },
        {
            'id': 'font_em_announcment',
            'type': 'float',
            'default_value': 1.0,
            'constraints_pass': constraints_pass_positive_value,
            'name': '예보문 글자 크기(em)',
            'phrase': '예보문의 글자 크기를 설정하세요.'
        },
        {
            'id': 'font_em_measurement',
            'type': 'float',
            'default_value': 1.2,
            'constraints_pass': constraints_pass_positive_value,
            'name': '측정값 글자 크기(em)',
            'phrase': '측정값의 글자 크기를 설정하세요.'
        },
        {
            'id': 'font_em_unit',
            'type': 'float',
            'default_value': 1.0,
            'constraints_pass': constraints_pass_positive_value,
            'name': '단위 글자 크기(em)',
            'phrase': '단위의 글자 크기를 설정하세요.'
        }
    ],
    'widget_dashboard_head': """<!-- No head content -->""",
    'widget_dashboard_title_bar': """<span class="widget-title-bar" style="padding-right: 0.5em; font-size: {{each_widget.font_em_name}}em">{{each_widget.name}}</span>""",
    'widget_dashboard_body': """
<div id="forecast-container-{{each_widget.unique_id}}" class="frame-aot day-background">
    <div class="row-aot-weather-2">
        <div id="forecast-time-{{each_widget.unique_id}}" style="text-align: center; font-size: {{ widget_options.font_em_measurement | default(1) }}em;">
            <!-- 시간 정보 표시 -->
        </div>
    </div>
    <div class="row-aot-weather-1">
        <div class="col-wether-graphic">
            <div id="forecast-icon-{{each_widget.unique_id}}" class="icon-aot-weather">
                <!-- 날씨 아이콘 표시 --> 
            </div>
        </div>
        <div class="col-wether-announcment">
            <span id="forecast-text-{{each_widget.unique_id}}" style="font-size: {{ widget_options.font_em_announcment | default(1) }}em;">
                <!-- 예보문 표시 -->
            </span>
        </div>
    </div>
    <div class="row-aot-weather-2">
        <span id="slider-container-{{each_widget.unique_id}}">
            <input type="range" class="btn-aot-slide-time" id="forecast-slider-{{each_widget.unique_id}}" min="1" max="24" value="{{ each_widget.forecast_offset | default(1) }}">
        </span>
    </div>
</div>
""",
    'widget_dashboard_js': """
// 추가 JS 함수 정의 가능
""",
    'widget_dashboard_js_ready': """
// 추가 준비 JS 코드
""",
    'widget_dashboard_js_ready_end': """
$(document).ready(function(){
  var unique_id = '{{ each_widget.unique_id }}';
  var refreshSeconds = {{ widget_options.refresh_seconds | default(1800) }};
  var slider = document.getElementById('forecast-slider-' + unique_id);
  var iconContainer = document.getElementById('forecast-icon-' + unique_id);
  var textContainer = document.getElementById('forecast-text-' + unique_id);
  var container = document.getElementById('forecast-container-' + unique_id);
  var forecastData = null;
  
  // 초기화: 저장된 슬라이더 값이 있으면 적용
  var storedHour = localStorage.getItem('forecast_slider_' + unique_id);
  if(storedHour !== null) {
    slider.value = storedHour;
  }
  
  // 폰트 크기 변수 (각 custom option 적용)
  var forecastTimeElem = document.getElementById('forecast-time-' + unique_id);
  var fontAnnouncment = "{{ widget_options.font_em_announcment | default(1) }}em";
  var fontMeasurement = "{{ widget_options.font_em_measurement | default(1.2) }}em";
  var fontUnit = "{{ widget_options.font_em_unit | default(1) }}em";

  /**
   * getWeatherIcon() 함수는 forecast 데이터(data)와 forecastHour(예측 시각의 시간)을 인자로 받아,
   * 주간/야간에 따라 적절한 아이콘 URL을 반환합니다.
   */
  function getWeatherIcon(data, forecastHour) {
    var isDay = (forecastHour >= 6 && forecastHour < 18);
    var sky = data.SKY;
    var pty = data.PTY;
    var pop = parseFloat(data.POP) || 0;
    var rn1 = parseFloat(data.RN1) || 0;
    var sno = parseFloat(data.SNO) || 0;
    var wsd = parseFloat(data.WSD) || 0;
    var tmp = parseFloat(data.TMP) || 0;
    
    if (sky === "맑음" && pty === "없음" && pop < 20 && rn1 === 0 && sno === 0) {
      if (wsd < 5) {
        return isDay ? "{{ url_for('static', filename='icons/sunny.svg') }}" 
                     : "{{ url_for('static', filename='icons/clear_night.svg') }}";
      } else {
        return isDay ? "{{ url_for('static', filename='icons/sunny_windy.svg') }}" 
                     : "{{ url_for('static', filename='icons/clear_night_windy.svg') }}";
      }
    }
    if ((sky === "맑음" || sky === "약간 구름" || (pop >= 20 && pop < 40)) && pty === "없음") {
      return isDay ? "{{ url_for('static', filename='icons/partly_cloudy.svg') }}"
                   : "{{ url_for('static', filename='icons/partly_cloudy_night.svg') }}";
    }
    if (sky === "구름많음" && pty === "없음" && pop >= 40 && pop <= 60) {
      return "{{ url_for('static', filename='icons/cloudy.svg') }}";
    }
    if (sky === "흐림" && pty === "없음" && pop >= 60) {
      return "{{ url_for('static', filename='icons/overcast.svg') }}";
    }
    if (pty === "비" && ((pop >= 40 && pop <= 60) || (rn1 >= 0.1 && rn1 <= 2)) && tmp >= 5) {
      return "{{ url_for('static', filename='icons/light_rain.svg') }}";
    }
    if (pty === "비" && (pop > 60 || rn1 > 2)) {
      return "{{ url_for('static', filename='icons/heavy_rain.svg') }}";
    }
    if (pty === "비" && pop >= 40 && wsd >= 7) {
      return "{{ url_for('static', filename='icons/rain_windy.svg') }}";
    }
    if ((sky === "구름많음" || sky === "흐림") && pty === "없음" && wsd >= 5 && pop >= 40 && pop <= 60) {
      return "{{ url_for('static', filename='icons/cloudy_windy.svg') }}";
    }
    if (pty === "비/눈") {
      return "{{ url_for('static', filename='icons/rain_snow_mix.svg') }}";
    }
    if (pty === "눈" || (sno > 0 && tmp <= 3)) {
      return "{{ url_for('static', filename='icons/snow.svg') }}";
    }
    if (pty === "소나기") {
      return "{{ url_for('static', filename='icons/shower.svg') }}";
    }
    return "{{ url_for('static', filename='icons/default.svg') }}";
  }
  
  /**
   * updateForecast() 함수는 선택된 시간(hour)을 바탕으로 forecastData에서 데이터를 가져와,
   * forecastHour를 계산한 후 아이콘 및 예보 표를 업데이트합니다.
   */
  function updateForecast(hour) {
    if (!forecastData || !forecastData.forecasts) {
      iconContainer.innerHTML = "예보 데이터를 찾을 수 없습니다.";
      textContainer.innerHTML = "";
      return;
    }
    var dataForHour = forecastData.forecasts[hour.toString()];
    if (!dataForHour) {
      iconContainer.innerHTML = hour + "시간 후의 예보 데이터가 없습니다.";
      textContainer.innerHTML = "";
      return;
    }
    var forecastTime = new Date();
    forecastTime.setHours(forecastTime.getHours() + parseInt(hour));
    var forecastHour = forecastTime.getHours();
    
    if (forecastHour >= 6 && forecastHour < 18) {
      container.classList.add("day-background");
      container.classList.remove("night-background");
      textContainer.style.color = "#000000";
      forecastTimeElem.style.color = "#000000";
    } else {
      container.classList.add("night-background");
      container.classList.remove("day-background");
      textContainer.style.color = "#ffffff";
      forecastTimeElem.style.color = "#ffffff";
    }
    
    // forecast-time 영역에 '00시간 뒤' 출력
    document.getElementById('forecast-time-' + unique_id).innerHTML = '<span style="font-size:' + fontAnnouncment + '; font-weight: bold;">' + hour + '시간 뒤</span>';

    var iconSrc = getWeatherIcon(dataForHour, forecastHour);
    
    function windDirection(vec) {
      vec = vec % 360;
      if (vec < 45) return "북풍";
      else if (vec < 90) return "북동풍";
      else if (vec < 135) return "동풍";
      else if (vec < 180) return "남동풍";
      else if (vec < 225) return "남풍";
      else if (vec < 270) return "남서풍";
      else if (vec < 315) return "서풍";
      else return "북서풍";
    }
    var windDir = windDirection(dataForHour.VEC || 0);
    var windSpeed = dataForHour.WSD || 0;
    
    var iconHtml = '<img src="' + iconSrc + '" style="width: 100px; height: 100px;">';
    iconContainer.innerHTML = iconHtml;
    
    var tmp = dataForHour.TMP;
    var reh = dataForHour.REH;
    var tmn = dataForHour.TMN;
    var tmx = dataForHour.TMX;
    var pop = dataForHour.POP;
    var rn1 = dataForHour.RN1;
    var sno = dataForHour.SNO;
    
    function formatValue(val) {
      return (val === undefined || val === null || val === "undefined") ? "--" : val;
    }
    
    tmp = formatValue(tmp);
    reh = formatValue(reh);
    tmn = formatValue(tmn);
    tmx = formatValue(tmx);
    pop = formatValue(pop);
    rn1 = formatValue(rn1);
    sno = formatValue(sno);
    
    var forecastText = '<table style="table-layout: fixed; width: 100%; border-collapse: collapse; font-size:' + fontAnnouncment + ';">';

    // 1) 온도, 일최저, 일최고
    forecastText += '<tr>';

    // (1) 온도
    forecastText += '  <td style="width:33%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">온도:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + tmp + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">°C</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    // (2) 일최저
    forecastText += '  <td style="width:33%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">최저:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + tmn + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">°C</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    // (3) 일최고
    forecastText += '  <td style="width:34%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">최고:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + tmx + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">°C</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    forecastText += '</tr>';

    // 2) 습도, 강수확률, 강수량(또는 신적설)
    forecastText += '<tr>';

    // (1) 습도
    forecastText += '  <td style="width:33%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">습도:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + reh + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">%</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    // (2) 강수확률
    forecastText += '  <td style="width:33%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">강수:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + pop + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">%</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    // (3) 강수량 or 신적설
    if (parseFloat(sno) > 0) {
    forecastText += '  <td style="width:34%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">적설:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + sno + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">cm</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';
    } else {
    forecastText += '  <td style="width:34%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">강수:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + rn1 + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">mm</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';
    }
    forecastText += '</tr>';

    // 3) 풍향, 풍속 (2개 열)
    forecastText += '<tr>';

    // (1) 풍향
    forecastText += '  <td style="width:50%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">풍향:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + windDir + '</b>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';

    // (2) 풍속
    forecastText += '  <td style="width:50%; padding: 0 8px;">';
    forecastText += '    <div style="';
    forecastText += '      display: flex; ';
    forecastText += '      justify-content: space-between; ';
    forecastText += '      align-items: center; ';
    forecastText += '      max-width: 130px; ';
    forecastText += '      margin: 0 auto;';
    forecastText += '    ">';
    forecastText += '      <span style="text-align: left;">풍속:</span>';
    forecastText += '      <span style="text-align: right;">';
    forecastText += '        <b style="font-size:' + fontMeasurement + ';">' + windSpeed + '</b>';
    forecastText += '        <span style="font-size:' + fontUnit + ';">m/s</span>';
    forecastText += '      </span>';
    forecastText += '    </div>';
    forecastText += '  </td>';
    forecastText += '</tr>';

    forecastText += '</table>';
    textContainer.innerHTML = forecastText;
  }
  
  function fetchForecastData(callback) {
    $.getJSON("{{ url_for('static', filename='json/forecast.json') }}")
      .done(function(data) {
        forecastData = data;
        if (callback) callback();
      })
      .fail(function(jqxhr, textStatus, error) {
        console.error("예보 JSON 불러오기 실패:", textStatus, error);
        iconContainer.innerHTML = '<div style="font-size:' + fontAnnouncment + ';">예보 데이터를 불러올 수 없습니다.</div>';
      });
  }
  
  slider.addEventListener("input", function() {
    var hour = this.value;
    localStorage.setItem('forecast_slider_' + unique_id, hour);
    updateForecast(hour);
  });
  
  fetchForecastData(function() {
    var initialHour = slider.value;
    updateForecast(initialHour);
  });
  
  setInterval(function(){
    fetchForecastData(function(){
      updateForecast(slider.value);
    });
  }, refreshSeconds * 1000);
});
"""
}